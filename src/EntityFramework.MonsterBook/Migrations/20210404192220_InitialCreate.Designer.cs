// <auto-generated />
using EntityFramework.MonsterBook;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFramework.MonsterBook.Migrations
{
    [DbContext(typeof(EFMonsterBookDbContext))]
    [Migration("20210404192220_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.AttackType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExtraDamage")
                        .HasColumnType("int");

                    b.Property<string>("ExtraDamageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDice")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId")
                        .IsUnique();

                    b.ToTable("AttackType");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgilityMax")
                        .HasColumnType("int");

                    b.Property<int>("AgilityMin")
                        .HasColumnType("int");

                    b.Property<int>("BodyMax")
                        .HasColumnType("int");

                    b.Property<int>("BodyMin")
                        .HasColumnType("int");

                    b.Property<int>("DamageReductionMax")
                        .HasColumnType("int");

                    b.Property<int>("DamageReductionMin")
                        .HasColumnType("int");

                    b.Property<int>("DexterityMax")
                        .HasColumnType("int");

                    b.Property<int>("DexterityMin")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("EmotionMax")
                        .HasColumnType("int");

                    b.Property<int>("EmotionMin")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceMax")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceMin")
                        .HasColumnType("int");

                    b.Property<bool>("IsUndead")
                        .HasColumnType("bit");

                    b.Property<int>("Karma")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevelMax")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevelMin")
                        .HasColumnType("int");

                    b.Property<int>("StrengthMax")
                        .HasColumnType("int");

                    b.Property<int>("StrengthMin")
                        .HasColumnType("int");

                    b.Property<int>("VitalityMax")
                        .HasColumnType("int");

                    b.Property<int>("VitalityMin")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerMax")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Creature");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureFlaw", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("FlawId")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "FlawId");

                    b.HasIndex("FlawId");

                    b.ToTable("CreatureFlaw");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureMerit", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("MeritId")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "MeritId");

                    b.HasIndex("MeritId");

                    b.ToTable("CreatureMerit");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkill", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureSkill");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkillCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("FirstSecondary")
                        .HasColumnType("int");

                    b.Property<int>("Primary")
                        .HasColumnType("int");

                    b.Property<int>("SecondSecondary")
                        .HasColumnType("int");

                    b.Property<int>("Tertiary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId")
                        .IsUnique();

                    b.ToTable("CreatureSkillCategories");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeapon", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CreatureWeapon");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Flaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Flaw");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Merit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Merit");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weapon");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.AttackType", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Weapon", "Weapon")
                        .WithOne("AttackType")
                        .HasForeignKey("Mithrill.MonsterBook.Domain.AttackType", "WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureFlaw", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureFlaws")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Flaw", "Flaw")
                        .WithMany("CreatureFlaws")
                        .HasForeignKey("FlawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureMerit", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureMerits")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Merit", "Merit")
                        .WithMany("CreatureMerits")
                        .HasForeignKey("MeritId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkill", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Skill", "Skill")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkillCategories", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithOne("CreateSkillCategories")
                        .HasForeignKey("Mithrill.MonsterBook.Domain.CreatureSkillCategories", "CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeapon", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureWeapons")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Weapon", "Weapon")
                        .WithMany("CreatureWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
