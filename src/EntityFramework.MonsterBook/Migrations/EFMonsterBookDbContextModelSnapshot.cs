// <auto-generated />
using EntityFramework.MonsterBook;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.MonsterBook.Migrations
{
    [DbContext(typeof(EfMonsterBookDbContext))]
    partial class EfMonsterBookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("BaseMovementInhibitoryFactor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "NameHu")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [NameHu] IS NOT NULL");

                    b.ToTable("Armor", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.AttackType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<int>("GuaranteedDamage")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDices")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttackType", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgilityMax")
                        .HasColumnType("int");

                    b.Property<int>("AgilityMin")
                        .HasColumnType("int");

                    b.Property<int>("BodyMax")
                        .HasColumnType("int");

                    b.Property<int>("BodyMin")
                        .HasColumnType("int");

                    b.Property<int>("DamageReductionMax")
                        .HasColumnType("int");

                    b.Property<int>("DamageReductionMin")
                        .HasColumnType("int");

                    b.Property<int>("DexterityMax")
                        .HasColumnType("int");

                    b.Property<int>("DexterityMin")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("EmotionMax")
                        .HasColumnType("int");

                    b.Property<int>("EmotionMin")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceMax")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceMin")
                        .HasColumnType("int");

                    b.Property<bool>("IsUndead")
                        .HasColumnType("bit");

                    b.Property<int>("KarmaMax")
                        .HasColumnType("int");

                    b.Property<int>("KarmaMin")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameHu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<int>("StrengthMax")
                        .HasColumnType("int");

                    b.Property<int>("StrengthMin")
                        .HasColumnType("int");

                    b.Property<int>("VitalityMax")
                        .HasColumnType("int");

                    b.Property<int>("VitalityMin")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerMax")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Creature", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureArmor", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalMovementInhibitoryFactor")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "ArmorId");

                    b.HasIndex("ArmorId");

                    b.ToTable("CreatureArmor", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureFlaw", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("FlawId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.HasKey("CreatureId", "FlawId");

                    b.HasIndex("FlawId");

                    b.ToTable("CreatureFlaw", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureMerit", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("MeritId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.HasKey("CreatureId", "MeritId");

                    b.HasIndex("MeritId");

                    b.ToTable("CreatureMerit", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkill", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("GuaranteedSuccesses")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<int>("SkillLevelMax")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevelMin")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureSkill", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkillCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("FirstSecondary")
                        .HasColumnType("int");

                    b.Property<int>("Primary")
                        .HasColumnType("int");

                    b.Property<int>("SecondSecondary")
                        .HasColumnType("int");

                    b.Property<int>("Tertiary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId")
                        .IsUnique();

                    b.ToTable("CreatureSkillCategories", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeapon", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalAttackModifier")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalDefenseModifier")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalInitiativeModifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.HasKey("CreatureId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CreatureWeapon", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeaponAttackType", b =>
                {
                    b.Property<int>("AttackTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("AttackTypeId", "CreatureId", "WeaponId");

                    b.HasIndex("CreatureId", "WeaponId");

                    b.ToTable("CreatureWeaponAttackType", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Flaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "NameHu")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [NameHu] IS NOT NULL");

                    b.ToTable("Flaw", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Merit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "NameHu")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [NameHu] IS NOT NULL");

                    b.ToTable("Merit", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attribute1")
                        .HasColumnType("int");

                    b.Property<int>("Attribute2")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "NameHu", "Category", "Attribute1", "Attribute2")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [NameHu] IS NOT NULL");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseAttackModifier")
                        .HasColumnType("int");

                    b.Property<int>("BaseAttackTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BaseDefenseModifier")
                        .HasColumnType("int");

                    b.Property<int>("BaseInitiativeModifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BaseAttackTypeId");

                    b.HasIndex("Name", "NameHu")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [NameHu] IS NOT NULL");

                    b.ToTable("Weapon", (string)null);
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureArmor", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Armor", "Armor")
                        .WithMany("CreatureArmors")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureArmors")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armor");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureFlaw", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureFlaws")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Flaw", "Flaw")
                        .WithMany("CreatureFlaws")
                        .HasForeignKey("FlawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Flaw");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureMerit", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureMerits")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Merit", "Merit")
                        .WithMany("CreatureMerits")
                        .HasForeignKey("MeritId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Merit");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkill", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Skill", "Skill")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureSkillCategories", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithOne("CreatureSkillCategories")
                        .HasForeignKey("Mithrill.MonsterBook.Domain.CreatureSkillCategories", "CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeapon", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.Creature", "Creature")
                        .WithMany("CreatureWeapons")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.Weapon", "Weapon")
                        .WithMany("CreatureWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeaponAttackType", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.AttackType", "AttackType")
                        .WithMany("CreatureWeaponAttackTypes")
                        .HasForeignKey("AttackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mithrill.MonsterBook.Domain.CreatureWeapon", "CreatureWeapon")
                        .WithMany("AdditionalAttackTypes")
                        .HasForeignKey("CreatureId", "WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackType");

                    b.Navigation("CreatureWeapon");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Weapon", b =>
                {
                    b.HasOne("Mithrill.MonsterBook.Domain.AttackType", "BaseAttackType")
                        .WithMany("Weapons")
                        .HasForeignKey("BaseAttackTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BaseAttackType");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Armor", b =>
                {
                    b.Navigation("CreatureArmors");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.AttackType", b =>
                {
                    b.Navigation("CreatureWeaponAttackTypes");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Creature", b =>
                {
                    b.Navigation("CreatureArmors");

                    b.Navigation("CreatureFlaws");

                    b.Navigation("CreatureMerits");

                    b.Navigation("CreatureSkillCategories");

                    b.Navigation("CreatureSkills");

                    b.Navigation("CreatureWeapons");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.CreatureWeapon", b =>
                {
                    b.Navigation("AdditionalAttackTypes");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Flaw", b =>
                {
                    b.Navigation("CreatureFlaws");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Merit", b =>
                {
                    b.Navigation("CreatureMerits");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Skill", b =>
                {
                    b.Navigation("CreatureSkills");
                });

            modelBuilder.Entity("Mithrill.MonsterBook.Domain.Weapon", b =>
                {
                    b.Navigation("CreatureWeapons");
                });
#pragma warning restore 612, 618
        }
    }
}
